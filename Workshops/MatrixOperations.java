
import java.util.Random;
import java.util.Arrays;

public class MatrixOperations {

    public static void main(String[] args) {
        // Define matrix size
        int rows = 3, cols = 3;
        System.out.println("Matrix generated by cols: \\n" + Arrays.deepToString(generateNewMatrixByCols(rows, cols)));// "

        System.out.println("Matrix generated by rows: \\n" + Arrays.deepToString(generateNewMatrixByRows(rows, cols)));// "

        int[][] testMatrix = generateNewMatrixByCols(rows, cols);
        System.out.println();
        displayMatrix(testMatrix);

        testMatrix = generateNewMatrixByRows(rows, cols);
        System.out.println();
        displayMatrix(testMatrix);
    }

    public static int[][] generateNewMatrixByRows(int rows, int cols) {
        int[][] newMatrix = new int[rows][cols];
        Random rand = new Random();
        // Fill matrix by rows:

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                newMatrix[i][j] = rand.nextInt(15);
            }
        }
        return newMatrix;

    }

    public static int[][] generateNewMatrixByCols(int rows, int cols) {
        int[][] newMatrix = new int[rows][cols];
        Random rand = new Random();
        // Fill matrix by cols:

        for (int j = 0; j < cols; j++) {
            for (int i = 0; i < rows; i++) {
                newMatrix[i][j] = rand.nextInt(15);
            }
        }
        return newMatrix;

    }

    public static void displayMatrix(int[][] matrix) {
        // for (int i = 0; i < matrix.length; i++) {
        // for (int j = 0; j < matrix[i].length; j++) {
        // System.out.print(matrix[i][j] + " ");
        // }
        // System.out.println();
        // }

        for (int[] row : matrix) {
            for (int element : row) {
                System.out.print(element + " ");
            }
            System.out.println();
        }

    }

}
